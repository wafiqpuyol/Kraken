generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model balance {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique(map: "Balance_userId_key")
  amount   Int
  locked   Int
  currency String
  user     user   @relation(fields: [userId], references: [id], map: "Balance_userId_fkey")
}

model merchant {
  id        Int                @id @default(autoincrement())
  email     String             @unique(map: "Merchant_email_key")
  name      String?
  auth_type merchant_auth_type
}

model onramptransaction {
  id           Int                      @id @default(autoincrement())
  status       onramptransaction_status
  token        String                   @unique(map: "OnRampTransaction_token_key")
  provider     String
  amount       Int
  startTime    DateTime
  lockedAmount Int
  userId       Int
  user         user                     @relation(fields: [userId], references: [id], map: "OnRampTransaction_userId_fkey")

  @@index([userId], map: "OnRampTransaction_userId_fkey")
}

model p2ptransfer {
  id                                Int                    @id @default(autoincrement())
  transactionID                     String
  currency                          String
  fee_currency                      String
  amount                            Int
  timestamp                         DateTime
  fromUserId                        Int
  toUserId                          Int
  domestic_trxn_fee                 String?
  international_trxn_fee            String?
  sender_number                     String
  receiver_number                   String
  sender_name                       String
  receiver_name                     String
  transactionType                   transaction_type
  transactionCategory               transaction_category
  status                            p2p_transaction_status
  user_p2ptransfer_fromUserIdTouser user                   @relation("p2ptransfer_fromUserIdTouser", fields: [fromUserId], references: [id], map: "P2pTransfer_fromUserId_fkey")
  user_p2ptransfer_toUserIdTouser   user                   @relation("p2ptransfer_toUserIdTouser", fields: [toUserId], references: [id], map: "P2pTransfer_toUserId_fkey")

  @@index([fromUserId], map: "P2pTransfer_fromUserId_fkey")
  @@index([toUserId], map: "P2pTransfer_toUserId_fkey")
}

model user {
  id                                       Int                 @id
  email                                    String?             @unique(map: "User_email_key")
  name                                     String?
  number                                   String              @unique(map: "User_number_key")
  password                                 String
  twoFactorActivated                       Boolean             @default(false)
  twoFactorSecret                          String?
  country                                  String?
  otpVerified                              Boolean             @default(false)
  isVerified                               Boolean             @default(false)
  verificationToken                        String              @default("")
  verificationTokenExpiresAt               DateTime?
  balance                                  balance?
  onramptransaction                        onramptransaction[]
  p2ptransfer_p2ptransfer_fromUserIdTouser p2ptransfer[]       @relation("p2ptransfer_fromUserIdTouser")
  p2ptransfer_p2ptransfer_toUserIdTouser   p2ptransfer[]       @relation("p2ptransfer_toUserIdTouser")
  preference                               preference?
  account                                  account?
  resetpassword                            resetpassword[]
  wallet                                   wallet?
}

model resetpassword {
  id          Int      @id @default(autoincrement())
  userId      Int
  token       String
  tokenExpiry DateTime
  user        user     @relation(fields: [userId], references: [id], map: "ResetPassword_userId_fkey")

  @@index([userId], map: "ResetPassword_userId_fkey")
}

model preference {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique(map: "Preference_userId_key")
  language String @default("U.S. English")
  currency String @default("USD")
  timezone String @default("[-04:00 EDT] New York, N. America")
  user     user   @relation(fields: [userId], references: [id], map: "Preference_userId_fkey")

  @@index([userId], map: "Preference_userId_fkey")
}

model account {
  id                   Int     @id @default(autoincrement())
  userId               Int     @unique(map: "Account_userId_key")
  current_email        String
  isLock               Boolean @default(false)
  email_update_pending Boolean @default(false)
  email_update         Json
  authorization_code   String?
  confirmation_code    String?
  user                 user    @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@index([userId], map: "Account_userId_fkey")
}

model wallet {
  id                       Int       @id @default(autoincrement())
  userId                   Int       @unique(map: "Wallet_userId_key")
  pincode                  String?
  emergency_code           String?
  emergency_code_expiresAt DateTime?
  user                     user      @relation(fields: [userId], references: [id], map: "Wallet_userId_fkey")

  @@index([userId], map: "Wallet_userId_fkey")
}

enum onramptransaction_status {
  Success
  Failed
  Processing
}

enum p2p_transaction_status {
  Success
  Failed
}

enum merchant_auth_type {
  Google
  Github
}

enum transaction_type {
  Send
  Recieve
}

enum transaction_category {
  Domestic
  International
}
